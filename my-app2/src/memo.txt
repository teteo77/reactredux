스토어(store)는 애플리케이션의 상태(state)를 가지고 있는 곳이다.
리튜서(reduxer)는 스토어가 가지고 있는 상태 변화시키기 위한 함수 이다.
액션(action)은 사용자의 입력, 웹요청 완료 처럼 어떠한 상태를 변화 시킬 수 있는 현상을 의미

dispatch로 상태가 변화하는 시점에 함수를 호출

리덕스는 createSotre라는 함수를 가지고 있으며, 이를 사용해서 스토어를 생성합니다.
    ㄴ 애플리케이션 전체에서 유일한 스토어를 사용해 애플리케이션 전체의 상태를 집약해서 관리하는 것입니다.

추가로 리덕스에는 subscribe라는 메서드가 있습니다. 이 메서드를 사용하면 스토어의 상태가 변경될 때 호출할 콜백 함수를 지정할 수 있습니다.
    ㄴ 즉 dispatcher로 스토어의 상태가 변화할 때 그러한 변화를 감시하는 역할을 할 수 있는 것입니다.

connect는 "리액트의 context에 저장돼 있는 스토어"를 특정 컴포넌트에 전달하는 역할을 합니다
    ㄴ context는 앱의 모든 컴포넌트에서 사용할 수 있는 데이터를 전달할 때 유용합니다.
    ㄴ context는 앱에서 컴포넌트에게 props를 사용하지 않고 필요한 데이터를 넘겨주며 사용할 수 있게 해줍니다.

react-redux가 하는것
    ㄴ Provider로 래핑하고 속성을 사용해 스토어를 전달한다.

Tasks에 있는 함수를containers/TodoApp에 가져와서 스토어의 dispatch메서드로 전달 이를 이용해 액션을 발행합니다.

https://velog.io/@sjgske/Redux-%EC%9E%91%EB%8F%99%EA%B3%BC%EC%A0%95-Middleware
    ㄴ Flux 패턴 

Flux 패턴
    ㄴ Flux 패턴은 사용자 입력을 기반으로 Action을 생성하고, 이를 Dispatcher에 전달하여 Store의 데이터를 변경한 뒤 View에 반영하는 단방향의 데이터 흐름을 가지는 소프트웨어 아키텍처입니다. 
    ㄴ Flux 패턴으로 구현된 프로젝트는 데이터가 단방향으로만 전달되기 때문에 데이터의 흐름을 파악하기가 용이하고, 그 결과를 쉽게 예측할 수 있다는 장점을 가집니다.
        ㄴ https://velog.io/@andy0011/Flux-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80

5-1은 96~113페이지 기능적인 설명만 있고 정리된 소스 참조
    ㄴ 96~ 108까지는 설명
    ㄴ 정리된건 109~110 참고 소스는 unuse-react-redux
    ㄴ 5-1에 111~113은 참고 소스 unuse-react-redux-formatted
    ㄴ 5-2에 redux가 나온다